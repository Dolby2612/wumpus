import java.awt.Point;
import java.util.HashMap;

public class AI extends Player
{
	public Point previousPosition;
	public HashMap<Point, GameObject> knownDangers;
	public HashMap<Point, GameObject> knownGoals;
	
	public AI(int x, int y)
	{
		super(x, y);
		
		knownDangers = new HashMap<Point, GameObject>();
		knownGoals = new HashMap<Point, GameObject>();
	}

	public AI(Point position)
	{
		super(position);
		
		knownDangers = new HashMap<Point, GameObject>();
		knownGoals = new HashMap<Point, GameObject>();
	}
	
	//Same as normal move method, except it saves the last position,
	//which has to be safe if the ai just moved from there
	@Override
	public void move(Point direction)
	{
		previousPosition = new Point(position.x, position.y);
		
		super.move(direction);
	}
	
	//
	public void act()
	{
		int[] triggers = board.getPlayerTriggers();
		
		//Check for cave exit
		if(triggers[4] > 0)
		{
			
			if(hasTreasure)
			{
				move(getRandomDirectionForwards());
			}
		}
		//Check for treasure
		else if(triggers[3] > 0)
		{
			move(getRandomDirectionForwards());
		}
		//Check for danger
		else if(triggers[2] > 0 || triggers[1] > 0 || triggers[0] > 0)
		{
			if(previousPosition!= null)
			{
				move(board.subtractPoints(position, previousPosition));
			}
			else
			{
				move(board.getRandomDirection());
			}
		}
		else
		{
			move(board.getRandomDirection());
		}
	}
	
	private Point getRandomDirectionForwards()
	{
		Point tempDirection = board.getRandomDirection();
		
		while(board.addPoints(position, tempDirection).equals(previousPosition))
		{
			tempDirection = board.getRandomDirection();
		}
		
		return tempDirection;
	}
	
	private void addToGoals(GameObject g)
	{
		
	}
	
	private void addToMap(HashMap<Point, GameObject> map, GameObject g)
	{
		for(int d = 0; d < Board.DIRECTIONS.length; d ++)
		{
			map.put(board.addPoints(position, Board.DIRECTIONS[d]), g);
		}
		map.remove(previousPosition);
	}
}
