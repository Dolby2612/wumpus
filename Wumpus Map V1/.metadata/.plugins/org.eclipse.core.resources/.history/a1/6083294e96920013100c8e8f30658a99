import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;


public class Board2
{
	public int size;
	
	public HashMap<Point, GameObject> gameObjects;
	public ArrayList<Point> emptyPoints;
	
	public Player player;
	public Wumpus wumpus;
	public Treasure treasure;
	public CaveExit caveExit;
	
	public Board2(int size, int totalDangers, int minFreeSpaceAroundDangers)
	{
		this.size = size;
		
		gameObjects = new HashMap<Point, GameObject>();
		emptyPoints = new ArrayList<Point>();
		
		Point tempPoint;
		
		//Randomly distribute Pits and Superbats across the cave
		int currentPits = 0;
		int totalPits = (int) (Math.random() * totalDangers + 1);
		
		while(currentPits < totalPits)
		{
			currentPits ++;
			tempPoint = getRandomEmptyPoint(minFreeSpaceAroundDangers);
			gameObjects.put(tempPoint, new Pit(tempPoint));
		}
		
		int currentBats = 0;
		int totalBats = totalDangers - totalPits;
		
		while(currentBats < totalBats)
		{
			currentBats ++;
			tempPoint = getRandomEmptyPoint(minFreeSpaceAroundDangers);
			gameObjects.put(tempPoint, new Superbat(tempPoint));
		}
		
		//Add Player, Wumpus, Treasure, and CaveExit to the cave
		player = new Player(getRandomEmptyPoint(1));
		wumpus = new Wumpus(getRandomEmptyPoint(1));
		//Since treasure and caveExit never move, they can be safely added to the gameObjects map
		treasure = new Treasure(getRandomEmptyPoint(1));
		gameObjects.put(treasure.position, treasure);
		caveExit = new CaveExit(getRandomEmptyPoint(1));
		gameObjects.put(caveExit.position, caveExit);
		
		//Fill rest of cave with empty spaces
		for(int x = 0; x < size; x ++)
		{
			for(int y = 0; y < size; y ++)
			{
				tempPoint = new Point(x, y);
				
				if(gameObjects.get(tempPoint) == null)
				{
					gameObjects.put(tempPoint, new Empty(tempPoint));
					//Keep track of all empty points in the cave, used in getRandomEmptyPoint method
					emptyPoints.add(tempPoint);
				}
			}
		}
	}
	
	public Point getRandomEmptyPoint(int minFreeSpaceAround)
	{
		ArrayList<Point> shuffledEmptyPoints = new ArrayList<Point>();
		Collections.copy(shuffledEmptyPoints, emptyPoints);
		Collections.shuffle(shuffledEmptyPoints);
		
		do
		{
			//
		}
		while(true);
	}
	
	public void link()
	{
		//player.board = this;
		//wumpus.board = this;
	}
}
