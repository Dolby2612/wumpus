Player AI Specification
-----------------------
Our Player AI must be able to:
1.Move in a random direction(never backwards) unless influenced by dangers or the treasure.
2.Must be able to asses the risk in moving from a particular square if danger(s) are detected.
3.Must be able to identify and avoid dangerous squares if given enough information about their location.
4.If it detects the treasure or the exit then it must iterate moving into another square and then back
  into the previous square until the treasure/exit is found.
5.Must attempt to kill the Wumpus if it knows its location.
6.Must be able to find its way to any given square while avoiding any known dangers and endeavouring to 
  avoid potentially dangerous squares.
  
  
  1,2,3 and 4 pseudocode
  --------------------
  This code assumes the following variables exist:
  
  int n - the number used to indicate a direction
  int back - the direction to choose if going backwards is nessecary
  int dangers - the number of dangerous tiles adjacent to 
  boolean adjTreasure - indicates whether or not the treasure is adjacent
  boolean adjExit - indicates whether or not the exit is adjacent
  boolean hasTreasure - is true after the player finds the treasure
  boolean goBack - indicates whether or not the ai should return to their last space
  boolean firstMove - is true for the first move only
 
  also the following methods need to exist
  
  int[] getCoords(int n) this will find the coordinates of the next square in the given direction(x and y returned)
  boolean canMove(int x, int y) this will check to see if the square at the given coordinates has a known threat in it
  void move(int n) this will move the player in the given direction
  int getBack(int n) returns a value for back
  int countDanger() this will count the number of dangerous tiles in the area
  boolean checkBack(int dangers) will determine whether or not the player needs to go back next turn
  ? checkSpace() this will check the occupant of the space the player is currently on
  ------------------------------------------------------------------------------------------------------------
 [ALL CODE WILL BE IN AN OUTERMOST LOOP]
 start outer loop
 
 
  if goBack is true
    move(back)
    back = getBack()
    checkSpace()
    dangers = countDanger()
    goBack = checkBack()
    
  if goBack is false
  
    start inner loop
    
    
      n = random number between 1 and 4
      
      while firstMove = true
        move(n)
        back = getBack(n)
        checkSpace()
        dangers = countDanger()
        goBack = checkBack()
        firstMove = false
      end while loop
     
    loop until n != back(inner loop)
    
  if adjTreasure
    move(n)
    checkSpace()
    if not on treasure
      back = true
      
  if adjExit and hasTreasure
    move(n)
    checkSpace()
    if not on treasure
      back = true
      
  else
  
    int coords[] = getCoords(n)
    
    if canMove(coords[0],coords[1])
       move(n)
       back = getBack(n)
       checkSpace()
       dangers = countDanger()
       goBack = checkBack()
 
 loop until canMove(coords[0],coords[1]
 
 [YOU SHOULD NOW HAVE RETURNED TO THE OUTERMOST LOOP]
  
    
    
  
  
    
